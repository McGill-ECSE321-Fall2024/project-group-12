package ca.mcgill.ecse321.group12.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.any;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.springframework.boot.test.context.SpringBootTest;

import ca.mcgill.ecse321.group12.exception.CustomException;
import ca.mcgill.ecse321.group12.model.Cart;
import ca.mcgill.ecse321.group12.model.Customer;
import ca.mcgill.ecse321.group12.model.Game;
import ca.mcgill.ecse321.group12.model.Game.Category;
import ca.mcgill.ecse321.group12.model.Game.Console;
import ca.mcgill.ecse321.group12.model.Game.GameStatus;
import ca.mcgill.ecse321.group12.model.Review;
import ca.mcgill.ecse321.group12.model.Wishlist;
import ca.mcgill.ecse321.group12.repository.CustomerRepository;
import ca.mcgill.ecse321.group12.repository.GameRepository;
import ca.mcgill.ecse321.group12.repository.ReviewRepository;

@SpringBootTest
public class ReviewServiceTests {

	@Mock // use for repo
	private ReviewRepository reviewRepository;

	@InjectMocks // used for service
	private ReviewService reviewService;

	@InjectMocks
	private GameService gameService;

	@Mock
	private GameRepository gameRepository;

	@InjectMocks
	private CustomerService customerService;

	@Mock
	private CustomerRepository customerRepository;

	@Test
	public void testCreateReview() {
		// set review parameters
		int reviewId = 0; // will be autogenerated
		String reviewText = "I wish I was the one to have come up with the concept of this game! Super cool.";
		int rating = 5;
		int likeCount = 0;

		Category aCategory = Category.Action;
		Console aConsole = Console.PC;
		int aInventory = 1;
		float aPrice = 1.0f;
		String aName = "Game Name...";
		String aDescription = "Game Description...";
		GameStatus aStatus = GameStatus.Archived;
		int aYear = 2021;

		String email = "carmin@gmail.com";
		String password = "password";
		String name = "Carmin";
		String phoneNumber = "5141234567";
		Wishlist wishlist = new Wishlist();
		int gameId = 0;
		int customerId = 0;

		Cart cart = new Cart();
		// create a review

		Game createdGame = new Game(gameId, aCategory, aConsole, aInventory, aPrice, aName, aDescription, aStatus, aYear);
		Customer createdCustomer = new Customer(customerId, email, password, name, phoneNumber, wishlist, cart);

		when(gameRepository.findGameById(gameId)).thenReturn(createdGame);
		when(customerRepository.findCustomerById(customerId)).thenReturn(createdCustomer);

		Review review = new Review();
		review.setLikeCount(likeCount);
		review.setRating(rating);
		review.setText(reviewText);
		review.setId(reviewId);
		review.setGame(createdGame);
		review.setCustomer(createdCustomer);
		when(reviewRepository.save(any(Review.class))).thenReturn(review);

		// call the service
		Review returnedReview = reviewService.createReview(likeCount, rating, reviewText, createdGame.getId(),
				createdCustomer.getId());

		// verify the result
		assertNotNull(returnedReview);
		assertEquals(reviewId, returnedReview.getId());
		assertEquals(likeCount, returnedReview.getLikeCount());
		assertEquals(rating, returnedReview.getRating());
		assertEquals(reviewText, returnedReview.getText());
		assertEquals(createdGame.getId(), returnedReview.getGame().getId());
		assertEquals(createdCustomer.getId(), returnedReview.getCustomer().getId());
		verify(reviewRepository, times(1)).save(any(Review.class));
	}

	@Test
	public void testGetReviewByValidId() {
		// set review parameters
		int reviewId = 0; // will be autogenerated
		String reviewText = "It is an ok game. The graphics are cool, but there are limited functionalities.";
		int rating = 2;
		int likeCount = 0;

		// set up feilds to create a game
		int gameId = 41;
		Category aCategory = Category.Action;
		Console aConsole = Console.PC;
		int aInventory = 1;
		float aPrice = 1.2f;
		String aName = "Game Name...";
		String aDescription = "Game Description...";
		GameStatus aStatus = GameStatus.Archived;
		int aYear = 2021;
		Game createdGame = new Game(gameId, aCategory, aConsole, aInventory, aPrice, aName, aDescription, aStatus, aYear);
		Cart cart = new Cart();
		when(gameRepository.findGameById(gameId)).thenReturn(createdGame);

		// sret up feilds to create a customer
		String email = "amy@gmail.com";
		String password = "password";
		String name = "Amy";
		String phoneNumber = "5141234567";
		Wishlist wishlist = new Wishlist();
		int customerId = 0;
		Customer createdCustomer = new Customer(customerId, email, password, name, phoneNumber, wishlist, cart);
		when(customerRepository.findCustomerById(customerId)).thenReturn(createdCustomer);

		// create a review
		Review review = new Review();

		// act
		review.setLikeCount(likeCount);
		review.setRating(rating);
		review.setText(reviewText);
		review.setId(reviewId);
		review.setGame(gameRepository.findGameById(gameId));
		review.setCustomer(customerRepository.findCustomerById(customerId));
		// Review createdReview = reviewService.findReviewById(reviewId);
		when(reviewRepository.save(any(Review.class))).thenReturn(review);
		Review createdReview = reviewService.createReview(likeCount, rating, reviewText, createdGame.getId(),
				createdCustomer.getId());
		when(reviewRepository.findReviewById(reviewId)).thenReturn(createdReview);

		// act
		Review returnedReview = reviewService.findReviewById(reviewId);

		// verify the result
		assertNotNull(returnedReview);
		assertEquals(reviewId, returnedReview.getId());
		assertEquals(likeCount, returnedReview.getLikeCount());
		assertEquals(rating, returnedReview.getRating());
		assertEquals(reviewText, returnedReview.getText());
		assertEquals(createdGame.getId(), returnedReview.getGame().getId());
		assertEquals(createdCustomer.getId(), returnedReview.getCustomer().getId());
		verify(reviewRepository, times(1)).save(any(Review.class));
	}

	@Test
	public void testGetReviewByInvalidId() {
		// set review parameters
		int reviewId = 27;
		// act
		// assert
		CustomException exception = assertThrows(CustomException.class, () -> reviewService.findReviewById(reviewId));
		assertEquals("There is no review with ID " + reviewId + ".", exception.getMessage());
	}

	@Test
	public void updateReviewWithValidArguments() {
		// set up review parameters
		int reviewId = 0;
		String reviewText = "I wish I was the one to have come up with the concept of this game! Super cool.";
		int rating = 5;
		int likeCount = 0;
		Category aCategory = Category.Action;
		Console aConsole = Console.PC;
		int aInventory = 1;
		float aPrice = 1.0f;
		String aName = "Game Name...";
		String aDescription = "Game Description...";
		GameStatus aStatus = GameStatus.Archived;
		int aYear = 2021;

		String email = "julien@gmail.com";
		String password = "password";
		String name = "Julien";
		String phoneNumber = "5141234567";
		Wishlist wishlist = new Wishlist();
		int gameId = 1;
		int customerId = 2;

		Cart cart = new Cart();
		// create a review
		Game createdGame = new Game(gameId, aCategory, aConsole, aInventory, aPrice, aName, aDescription, aStatus, aYear);
		when(gameRepository.findGameById(gameId)).thenReturn(createdGame);

		Customer createdCustomer = new Customer(customerId, email, password, name, phoneNumber, wishlist, cart);
		when(customerRepository.findCustomerById(customerId)).thenReturn(createdCustomer);

		Review review = reviewService.createReview(likeCount, rating, reviewText, createdGame.getId(),
				createdCustomer.getId());
		when(reviewRepository.findReviewById(reviewId)).thenReturn(review);

		// call the service

		String updatedReviewText = "Kind of boring after playing the game for a while.";
		int updatedRating = 4;
		int updatedLikeCount = 5;

		Review updatedReview = new Review();
		updatedReview.setLikeCount(updatedLikeCount);
		updatedReview.setRating(updatedRating);
		updatedReview.setText(updatedReviewText);
		updatedReview.setGame(createdGame);
		updatedReview.setCustomer(createdCustomer);
		// updatedReview.setId(reviewId);
		when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

		// act

		reviewService.updateReview(reviewId, updatedLikeCount, updatedRating, updatedReviewText, createdGame.getId(),
				createdCustomer.getId());

		// verify the result
		assertNotNull(updatedReview);
		assertEquals(reviewId, updatedReview.getId());
		assertEquals(updatedLikeCount, updatedReview.getLikeCount());
		assertEquals(updatedRating, updatedReview.getRating());
		assertEquals(updatedReviewText, updatedReview.getText());
		assertEquals(createdGame.getId(), updatedReview.getGame().getId());
		assertEquals(createdCustomer.getId(), updatedReview.getCustomer().getId());

	}

	@Test
	public void updateReviewWithInvalidLikeCount() {
		// set up parameters
		int reviewId = 30;
		String reviewText = "cool game!";
		int rating = 5;
		int likeCount = 7;
		Category aCategory = Category.Action;
		Console aConsole = Console.PC;
		int aInventory = 1;
		float aPrice = 1.0f;
		String aName = "Game Name...";
		String aDescription = "Game Description...";
		GameStatus aStatus = GameStatus.Archived;
		int aYear = 2021;

		String email = "carmi@gmail.com";
		String password = "passwordi";
		String name = "Carmi";
		String phoneNumber = "5141234569";
		Wishlist wishlist = new Wishlist();
		int gameId = 0;
		int customerId = 0;

		Cart cart = new Cart();
		// create a review

		Game createdGame = new Game(gameId, aCategory, aConsole, aInventory, aPrice, aName, aDescription, aStatus, aYear);
		Customer createdCustomer = new Customer(customerId, email, password, name, phoneNumber, wishlist, cart);
		when(gameRepository.findGameById(gameId)).thenReturn(createdGame);
		when(customerRepository.findCustomerById(customerId)).thenReturn(createdCustomer);
		Review review = reviewService.createReview(likeCount, rating, reviewText, createdGame.getId(),
				createdCustomer.getId());

		when(reviewRepository.findReviewById(reviewId)).thenReturn(review);

		String updatedReviewText = "snazzy game!";
		int updatedRating = 5;
		int updatedLikeCount = -1;

		Review updatedReview = new Review();
		updatedReview.setLikeCount(updatedLikeCount);
		updatedReview.setRating(updatedRating);
		updatedReview.setText(updatedReviewText);
		updatedReview.setGame(createdGame);
		updatedReview.setCustomer(createdCustomer);

		when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

		// act
		// assert
		CustomException exception = assertThrows(CustomException.class, () -> reviewService.updateReview(reviewId,
				updatedLikeCount, updatedRating, updatedReviewText, createdGame.getId(), createdCustomer.getId()));
		assertEquals("Like count cannot be negative.", exception.getMessage());
	}

	@Test
	public void updateReviewWithInvalidRating() {
		// set up parameters
		int reviewId = 50;
		String reviewText = "Awesome game!";
		int rating = 4;
		int likeCount = 3;

		Category aCategory = Category.Action;
		Console aConsole = Console.PC;
		int aInventory = 1;
		float aPrice = 1.0f;
		String aName = "Game Name...";
		String aDescription = "Game Description...";
		GameStatus aStatus = GameStatus.Archived;
		int aYear = 2021;

		String email = "sophia@gmail.com";
		String password = "password";
		String name = "Sophia";
		String phoneNumber = "5141234567";
		Wishlist wishlist = new Wishlist();
		int gameId = 0;
		int customerId = 0;

		Cart cart = new Cart();
		// create a review

		Game createdGame = new Game(gameId, aCategory, aConsole, aInventory, aPrice, aName, aDescription, aStatus, aYear);
		Customer createdCustomer = new Customer(customerId, email, password, name, phoneNumber, wishlist, cart);
		when(gameRepository.findGameById(gameId)).thenReturn(createdGame);
		when(customerRepository.findCustomerById(customerId)).thenReturn(createdCustomer);

		Review review = reviewService.createReview(likeCount, rating, reviewText, createdGame.getId(),
				createdCustomer.getId());
		when(reviewRepository.findReviewById(reviewId)).thenReturn(review);

		String updatedReviewText = "snazzy game!";
		int updatedRating = -6;
		int updatedLikeCount = 1;

		Review updatedReview = new Review();
		updatedReview.setLikeCount(updatedLikeCount);
		updatedReview.setRating(updatedRating);
		updatedReview.setText(updatedReviewText);
		updatedReview.setGame(createdGame);
		updatedReview.setCustomer(createdCustomer);

		when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

		// act
		// assert
		CustomException exception = assertThrows(CustomException.class, () -> reviewService.updateReview(reviewId,
				updatedLikeCount, updatedRating, updatedReviewText, createdGame.getId(), createdCustomer.getId()));
		assertEquals("Rating must be between 0 and 5.", exception.getMessage());
	}

	@Test
	public void updateReviewWithInvalidText() {
		// set up parameters
		int reviewId = 20;
		String reviewText = "not bad, ok.";
		int rating = 2;
		int likeCount = 4;

		Category aCategory = Category.Action;
		Console aConsole = Console.PC;
		int aInventory = 1;
		float aPrice = 1.0f;
		String aName = "Game Name...";
		String aDescription = "Game Description...";
		GameStatus aStatus = GameStatus.Archived;
		int aYear = 2021;

		String email = "james@gmail.com";
		String password = "password";
		String name = "James";
		String phoneNumber = "5141234567";
		Wishlist wishlist = new Wishlist();
		int gameId = 0;
		int customerId = 0;

		Cart cart = new Cart();
		// create a review

		Game createdGame = new Game(gameId, aCategory, aConsole, aInventory, aPrice, aName, aDescription, aStatus, aYear);
		Customer createdCustomer = new Customer(customerId, email, password, name, phoneNumber, wishlist, cart);

		when(gameRepository.findGameById(gameId)).thenReturn(createdGame);
		when(customerRepository.findCustomerById(customerId)).thenReturn(createdCustomer);

		// create a review

		Review review = reviewService.createReview(likeCount, rating, reviewText, createdGame.getId(),
				createdCustomer.getId());

		when(reviewRepository.findReviewById(reviewId)).thenReturn(review);

		String updatedReviewText = null;
		int updatedRating = 3;
		int updatedLikeCount = 2;

		Review updatedReview = new Review();
		updatedReview.setLikeCount(updatedLikeCount);
		updatedReview.setRating(updatedRating);
		updatedReview.setText(updatedReviewText);
		updatedReview.setGame(createdGame);
		updatedReview.setCustomer(createdCustomer);

		when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

		// act
		// assert

		CustomException exception = assertThrows(CustomException.class, () -> reviewService.updateReview(reviewId,
				updatedLikeCount, updatedRating, updatedReviewText, createdGame.getId(), createdCustomer.getId()));
		assertEquals("Review text cannot be empty.", exception.getMessage());

	}

}