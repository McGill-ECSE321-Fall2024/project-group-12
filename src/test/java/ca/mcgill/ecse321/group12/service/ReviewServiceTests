package ca.mcgill.ecse321.group12.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.any;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.springframework.boot.test.context.SpringBootTest;

import ca.mcgill.ecse321.group12.exception.CustomException;
import ca.mcgill.ecse321.group12.model.Review;
import ca.mcgill.ecse321.group12.repository.ReviewRepository;

@SpringBootTest
public class ReviewServiceTests {

    @Mock
    private ReviewRepository reviewRepository;

    @InjectMocks
    private ReviewService reviewService;

    @SuppressWarnings("null")
    @Test
    public void testCreateReview() {
        // set review parameters
        int reviewId = 0; // will be autogenerated
        String reviewText = "I wish I was the one to have come up with the concept of this game! Super cool.";
        int rating = 5;
        int likeCount = 0;
        // customer? or do i not need
        // aGame? or do i not need

        // create a review
        Review review = new Review();
        review.setLikeCount(likeCount);
        review.setRating(rating);
        review.setText(reviewText);
        reivew.setId(reviewId);
        when(reviewRepository.save(any(Review.class))).thenReturn(review);

        // call the service
        Review returnedReview = reviewService.createReview(likeCount, rating, reviewText);

        // verify the result
        assertNotNull(returnedReview);
        assertEquals(reviewId, returnedReview.getId());
        assertEquals(likeCount, returnedReview.getLikeCount());
        assertEquals(rating, returnedReview.getRating());
        assertEquals(reviewText, returnedReview.getText());
        verify(reviewRepository, times(1)).save(any(Review.class));
    }

        @Test
        public void testGetReviewByValidId() {
            // set review parameters
            int reviewId = 0; // will be autogenerated
            String reviewText = "It is an ok game. The graphics are cool, but there are limited functionalities.";
            int rating = 2.4;
            int likeCount = 0;
            // customer? or do i not need
            // aGame? or do i not need
    
            // create a review
            Review review = new Review();
            review.setLikeCount(likeCount);
            review.setRating(rating);
            review.setText(reviewText);
            reivew.setId(reviewId);
          
            Review createdReview = reviewService.createReview(likeCount, rating, reviewText);
            when(reviewRepository.findReviewById(reviewId)).thenReturn(review);

            // act
            Review returnedReview = reviewService.getReviewById(reviewId);


            // verify the result
            assertNotNull(returnedReview);
            assertEquals(reviewId, createdReview.getId());
            assertEquals(likeCount, createdReview.getLikeCount());
            assertEquals(rating, createdReview.getRating());
            assertEquals(reviewText, createdReview.getText());
            verify(reviewRepository, times(1)).save(any(Review.class));
        }

        @Test
        public void testGetReviewByInvalidId() {
            // set review parameters
            int reviewId = 27; // will be autogenerated
            // act
            // assert
            CustomException exception = assertThrows(CustomException.class, () -> reviewService.getReviewById(reviewId));
            assertEquals("There is no review with ID" + reviewID + ".", exception.getMessage());
        }      

        @Test 
        public void updateReviewWithValidArguments(){
            // set up review parameters
            int reviewId = 56; 
            String reviewText = "I wish I was the one to have come up with the concept of this game! Super cool.";
            int rating = 5;
            int likeCount = 0;
            // create a review
            Review review = new Review(reviewId, likeCount, rating, reviewText, null, null);
            when(reviewRepository.findReviewById(reviewId)).thenReturn(review);
            // call the service
            
            String updatedReviewText = "Kind of boring after playing the game for a while.";
            int updatedRating = 2.4;
            int updatedLikeCount = 5;
            
            Review updatedReview = new Review();
            updatedReview.setLikeCount(updatedLikeCount);
            updatedReview.setRating(updatedRating);
            updatedReview.setText(updatedReviewText);
          //  updatedReview.setId(reviewId);
            when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);
            
            // act 

            reviewService.updateReview(reviewId, updatedLikeCount, updatedRating, updatedReviewText);
            
            // verify the result
            assertNotNull(updatedReview);
            assertEquals(reviewId, updatedReview.getId());
            assertEquals(updatedLikeCount, updatedReview.getLikeCount());
            assertEquals(updatedRating, updatedReview.getRating());
            assertEquals(updatedReviewText, updatedReview.getText());
        
        }   

        @Test
        public void updateReviewWithInvalidLikeCount() {
            // set up parameters
            int reviewId = 56;
            String reviewText = "cool game!"
            int rating = 5;
            int likeCount = 7;
            // create a review
            Review review = new Review(reviewId, likeCount, rating, reviewText, null, null);
            when(reviewRepository.findReviewById(reviewId)).thenReturn(review);
            
            String updatedReviewText = "snazzy game!"
            int updatedRating = 5;
            int updatedLikeCount = -1;

            Review updatedReview = new Review();
            updatedReview.setLikeCount(updatedLikeCount);
            updatedReview.setRating(updatedRating);
            updatedReview.setText(updatedReviewText);
           // updatedReview.setId(reviewId);
            when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

            // act
            // assert
            CustomException exception = assertThrows(CustomException.class, () -> reviewService.updateReview(reviewId, updatedLikeCount, updatedRating, updatedReviewText));
            assertEquals("Like count is invalid, must be a positive number.", exception.getMessage());
        }

        @Test
        public void updateReviewWithInvalidRating() {
            // set up parameters
            int reviewId = 50;
            String reviewText = "Awesome game!"
            int rating = 4
            int likeCount = 3;
            // create a review
            Review review = new Review(reviewId, likeCount, rating, reviewText, null, null);
            when(reviewRepository.findReviewById(reviewId)).thenReturn(review);
            
            String updatedReviewText = "snazzy game!"
            int updatedRating = -6;
            int updatedLikeCount = 1;

            Review updatedReview = new Review();
            updatedReview.setLikeCount(updatedLikeCount);
            updatedReview.setRating(updatedRating);
            updatedReview.setText(updatedReviewText);
           // updatedReview.setId(reviewId);
            when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

            // act
            // assert
            CustomException exception = assertThrows(CustomException.class, () -> reviewService.updateReview(reviewId, updatedLikeCount, updatedRating, updatedReviewText));
            assertEquals("Rating is invalid, must be a positive number.", exception.getMessage());
        }

        @Test
        public void updateReviewWithInvalidText() {
            // set up parameters
            int reviewId = 20;
            String reviewText = "not bad, ok."
            int rating = 2
            int likeCount = 4;
            // create a review
            Review review = new Review(reviewId, likeCount, rating, reviewText, null, null);
            when(reviewRepository.findReviewById(reviewId)).thenReturn(review);

            String updatedReviewText = null;
            int updatedRating = 3;
            int updatedLikeCount = 2;

            Review updatedReview = new Review();
            updatedReview.setLikeCount(updatedLikeCount);
            updatedReview.setRating(updatedRating);
            updatedReview.setText(updatedReviewText);

            when(reviewRepository.save(any(Review.class))).thenReturn(updatedReview);

            // act
            // assert

            CustomException exception = assertThrows(CustomException.class, () -> reviewService.updateReview(reviewId, updatedLikeCount, updatedRating, updatedReviewText));
            assertEquals("Review text is invalid, cannot be empty.", exception.getMessage());


        }

}